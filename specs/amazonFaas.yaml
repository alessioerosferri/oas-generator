openapi: 3.0.0
servers:
  - url: 'https://lambda.amazonaws.com/'
  - url: 'http://lambda.amazonaws.com/'
info:
  version: '2015-03-31'
  x-release: v4
  title: AWS Lambda
  description: >-
    AWS Lambda
 Overview


This is the
    AWS Lambda API Reference. The AWS Lambda Developer Guide provides
    additional information. For the service overview, see What is AWS
    Lambda, and for information about how the service works, see AWS
    Lambda: How it Works in the AWS Lambda Developer Guide.


  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: lambda
  x-origin:
    - contentType: application/json
      url: >-
        https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lambda-2015-03-31.normal.json
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: >-
      https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/lambda/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  '/2015-03-31/functions/{FunctionName}/policy':
    post:
      operationId: AddPermission
      description: >-

Adds a permission to the resource policy associated with the
        specified AWS Lambda function. You use resource policies to grant
        permissions to event sources that use push model. In a
        push model, event sources (such as Amazon S3 and custom
        applications) invoke your Lambda function. Each permission you add to
        the resource policy allows an event source, permission to invoke the
        Lambda function.


For information about the push model, see Lambda
        Functions.


If you are using versioning, the permissions you
        add are specific to the Lambda function version or alias you specify in
        the AddPermission request via the Qualifier
        parameter. For more information about versioning, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:AddPermission
        action.


      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPermissionResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '484':
          description: PolicyLengthExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyLengthExceededException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPermissionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetPolicy
      description: >-

Returns the resource policy associated with the specified Lambda
        function.


 If you are using the versioning feature, you can get
        the resource policy associated with the specific Lambda function version
        or alias by specifying the version or alias name using the
        Qualifier parameter. For more information about versioning,
        see AWS
        Lambda Function Versioning and Aliases.


You need permission
        for the lambda:GetPolicy action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPolicyResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPolicyRequest'
        required: true
  '/2015-03-31/functions/{FunctionName}/aliases':
    post:
      operationId: CreateAlias
      description: >-

Creates an alias that points to the specified Lambda function
        version. For more information, see Introduction
        to AWS Lambda Aliases.


Alias names are unique for a given
        function. This requires permission for the lambda:CreateAlias
        action.


      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAliasRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListAliases
      description: >-

Returns list of aliases created for a Lambda function. For each
        alias, the response includes information such as the alias ARN,
        description, alias name, and the function version to which it points.
        For more information, see Introduction
        to AWS Lambda Aliases.


This requires permission for the
        lambda:ListAliases action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAliasesRequest'
        required: true
  /2015-03-31/event-source-mappings/:
    post:
      operationId: CreateEventSourceMapping
      description: >-

Identifies a stream as an event source for a Lambda function. It can
        be either an Amazon Kinesis stream or an Amazon DynamoDB stream. AWS
        Lambda invokes the specified function when records are posted to the
        stream.


This association between a stream source and a Lambda
        function is called the event source mapping.


You provide mapping
        information (for example, which stream to read from and which Lambda
        function to invoke) in the request body.


Each event source, such
        as an Amazon Kinesis or a DynamoDB stream, can be associated with
        multiple AWS Lambda functions. A given Lambda function can be associated
        with multiple AWS event sources.


If you are using versioning, you
        can specify a specific function version or an alias via the function
        name parameter. For more information about versioning, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:CreateEventSourceMapping
        action.


      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '482':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventSourceMappingRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListEventSourceMappings
      description: >-

Returns a list of event source mappings you created using the
        CreateEventSourceMapping (see
        CreateEventSourceMapping).


For each mapping, the API
        returns configuration information. You can optionally specify filters to
        retrieve specific event source mappings.


If you are using the
        versioning feature, you can get list of event source mappings for a
        specific Lambda function version or an alias as described in the
        FunctionName parameter. For information about the
        versioning feature, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:ListEventSourceMappings
        action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventSourceMappingsResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListEventSourceMappingsRequest'
        required: true
  /2015-03-31/functions:
    post:
      operationId: CreateFunction
      description: >-

Creates a new Lambda function. The function metadata is created from
        the request parameters, and the code for the function is provided by a
        .zip file in the request body. If the function name already exists, the
        operation will fail. Note that the function name is case-sensitive.



 If you are using versioning, you can also publish a version of the
        Lambda function you are creating using the Publish
        parameter. For more information about versioning, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:CreateFunction
        action.


      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeStorageExceededException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/aliases/{Name}':
    delete:
      operationId: DeleteAlias
      description: >-

Deletes the specified Lambda function alias. For more information,
        see Introduction
        to AWS Lambda Aliases.


This requires permission for the
        lambda:DeleteAlias action.


      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: Name
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAliasRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAlias
      description: >-

Returns the specified alias information such as the alias ARN,
        description, and function version it is pointing to. For more
        information, see Introduction
        to AWS Lambda Aliases.


This requires permission for the
        lambda:GetAlias action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: Name
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAliasRequest'
        required: true
    put:
      operationId: UpdateAlias
      description: >-

Using this API you can update the function version to which the alias
        points and the alias description. For more information, see Introduction
        to AWS Lambda Aliases.


This requires permission for the
        lambda:UpdateAlias action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: Name
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAliasRequest'
        required: true
  '/2015-03-31/event-source-mappings/{UUID}':
    delete:
      operationId: DeleteEventSourceMapping
      description: >-

Removes an event source mapping. This means AWS Lambda will no longer
        invoke the function for events in the associated source.


This
        operation requires permission for the
        lambda:DeleteEventSourceMapping action.


      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: UUID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEventSourceMappingRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetEventSourceMapping
      description: >-

Returns configuration information for the specified event source
        mapping (see CreateEventSourceMapping).


This operation
        requires permission for the lambda:GetEventSourceMapping
        action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: UUID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEventSourceMappingRequest'
        required: true
    put:
      operationId: UpdateEventSourceMapping
      description: >-

You can update an event source mapping. This is useful if you want to
        change the parameters of the existing mapping without losing your
        position in the stream. You can change which function will receive the
        stream records, but to change the stream itself, you must create a new
        mapping.


If you are using the versioning feature, you can update
        the event source mapping to map to a specific Lambda function version or
        alias as described in the FunctionName parameter. For
        information about the versioning feature, see AWS
        Lambda Function Versioning and Aliases.


If you disable the
        event source mapping, AWS Lambda stops polling. If you enable again, it
        will resume polling from the time it had stopped polling, so you don't
        lose processing of any records. However, if you delete event source
        mapping and create it again, it will reset.


This operation
        requires permission for the lambda:UpdateEventSourceMapping
        action.


      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSourceMappingConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
      parameters:
        - name: UUID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventSourceMappingRequest'
        required: true
  '/2015-03-31/functions/{FunctionName}':
    delete:
      operationId: DeleteFunction
      description: >-

Deletes the specified Lambda function code and configuration.



If you are using the versioning feature and you don't specify a
        function version in your DeleteFunction request, AWS Lambda
        will delete the function, including all its versions, and any aliases
        pointing to the function versions. To delete a specific function
        version, you must provide the function version via the
        Qualifier parameter. For information about function
        versioning, see AWS
        Lambda Function Versioning and Aliases.


When you delete a
        function the associated resource policy is also deleted. You will need
        to delete the event source mappings explicitly.


This operation
        requires permission for the lambda:DeleteFunction
        action.


      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '484':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFunctionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFunction
      description: >-

Returns the configuration information of the Lambda function and a
        presigned URL link to the .zip file you uploaded with
        CreateFunction so you can download the .zip file. Note that the
        URL is valid for up to 10 minutes. The configuration information is the
        same information you provided as parameters when uploading the
        function.


Using the optional Qualifier parameter,
        you can specify a specific function version for which you want this
        information. If you don't specify this parameter, the API uses
        unqualified function ARN which return information about the
        $LATEST version of the Lambda function. For more
        information, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:GetFunction action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctionResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFunctionRequest'
        required: true
  '/2017-10-31/functions/{FunctionName}/concurrency':
    delete:
      operationId: DeleteFunctionConcurrency
      description: >-
        Removes concurrent execution limits from this function. For more
        information, see concurrent-executions.
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFunctionConcurrencyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutFunctionConcurrency
      description: >-
        Sets a limit on the number of concurrent executions available to this
        function. It is a subset of your account's total concurrent execution
        limit per region. Note that Lambda automatically reserves a buffer of
        100 concurrent executions for functions without any reserved concurrency
        limit. This means if your account limit is 1000, you have a total of 900
        available to allocate to individual functions. For more information, see
        concurrent-executions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concurrency'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFunctionConcurrencyRequest'
        required: true
  /2016-08-19/account-settings/:
    get:
      operationId: GetAccountSettings
      description: >-

Returns a customer's account settings.


You can use this
        operation to retrieve Lambda limits information, such as code size and
        concurrency limits. For more information about limits, see AWS
        Lambda Limits. You can also retrieve resource usage statistics, such
        as code storage usage and function count.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountSettingsResponse'
        '480':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '481':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountSettingsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/configuration':
    get:
      operationId: GetFunctionConfiguration
      description: >-

Returns the configuration information of the Lambda function. This
        the same information you provided as parameters when uploading the
        function by using CreateFunction.


If you are using the
        versioning feature, you can retrieve this information for a specific
        function version by using the optional Qualifier parameter
        and specifying the function version or alias that points to it. If you
        don't provide it, the API returns information about the $LATEST version
        of the function. For more information about versioning, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:GetFunctionConfiguration
        operation.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFunctionConfigurationRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateFunctionConfiguration
      description: >-

Updates the configuration parameters for the specified Lambda
        function by using the values provided in the request. You provide only
        the parameters you want to change. This operation must only be used on
        an existing Lambda function and cannot be used to update the function's
        code.


If you are using the versioning feature, note this API will
        always update the $LATEST version of your Lambda function. For
        information about the versioning feature, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the
        lambda:UpdateFunctionConfiguration action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '485':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionConfigurationRequest'
        required: true
  '/2015-03-31/functions/{FunctionName}/invocations':
    post:
      operationId: Invoke
      description: >-

Invokes a specific Lambda function. For an example, see Create
        the Lambda Function and Test It Manually.


If you are using
        the versioning feature, you can invoke the specific function version by
        providing function version or alias name that is pointing to the
        function version using the Qualifier parameter in the
        request. If you don't provide the Qualifier parameter, the
        $LATEST version of the Lambda function is invoked.
        Invocations occur at least once in response to an event and functions
        must be idempotent to handle this. For information about the versioning
        feature, see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:InvokeFunction
        action.


The TooManyRequestsException noted
        below will return the following:
        ConcurrentInvocationLimitExceeded will be returned if you
        have no functions with reserved concurrency and have exceeded your
        account concurrent limit or if a function without reserved concurrency
        exceeds the account's unreserved concurrency limit.
        ReservedFunctionConcurrentInvocationLimitExceeded will be
        returned when a function with reserved concurrency exceeds its
        configured concurrency limit.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvocationResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidRequestContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestContentException'
        '483':
          description: RequestTooLargeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTooLargeException'
        '484':
          description: UnsupportedMediaTypeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '487':
          description: EC2UnexpectedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EC2UnexpectedException'
        '488':
          description: SubnetIPAddressLimitReachedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubnetIPAddressLimitReachedException'
        '489':
          description: ENILimitReachedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ENILimitReachedException'
        '490':
          description: EC2ThrottledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EC2ThrottledException'
        '491':
          description: EC2AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EC2AccessDeniedException'
        '492':
          description: InvalidSubnetIDException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSubnetIDException'
        '493':
          description: InvalidSecurityGroupIDException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSecurityGroupIDException'
        '494':
          description: InvalidZipFileException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidZipFileException'
        '495':
          description: KMSDisabledException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KMSDisabledException'
        '496':
          description: KMSInvalidStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KMSInvalidStateException'
        '497':
          description: KMSAccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KMSAccessDeniedException'
        '498':
          description: KMSNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KMSNotFoundException'
        '499':
          description: InvalidRuntimeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuntimeException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvocationRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2014-11-13/functions/{FunctionName}/invoke-async/':
    post:
      operationId: InvokeAsync
      description: >-

This API is deprecated. We recommend you use
        Invoke API (see Invoke).


Submits
        an invocation request to AWS Lambda. Upon receiving the request, Lambda
        executes the specified function asynchronously. To see the logs
        generated by the Lambda function execution, see the CloudWatch Logs
        console.


This operation requires permission for the
        lambda:InvokeFunction action.


      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeAsyncResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidRequestContentException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestContentException'
        '483':
          description: InvalidRuntimeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRuntimeException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeAsyncRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /2015-03-31/functions/:
    get:
      operationId: ListFunctions
      description: >-

Returns a list of your Lambda functions. For each function, the
        response includes the function configuration information. You must use
        GetFunction to retrieve the code for your function.


This
        operation requires permission for the lambda:ListFunctions
        action.


If you are using the versioning feature, you can list all
        of your functions or only $LATEST versions. For information
        about the versioning feature, see AWS
        Lambda Function Versioning and Aliases.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFunctionsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2017-03-31/tags/{ARN}':
    get:
      operationId: ListTags
      description: >-
        Returns a list of tags assigned to a function when supplied the function
        ARN (Amazon Resource Name). For more information on Tagging, see Tagging
        Lambda Functions in the AWS Lambda Developer Guide.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: ARN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: >-
        Creates a list of tags (key-value pairs) on the Lambda function.
        Requires the Lambda function ARN (Amazon Resource Name). If a key is
        specified without a value, Lambda creates a tag with the specified key
        and a value of null. For more information, see Tagging
        Lambda Functions in the AWS Lambda Developer Guide.
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: ARN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
        required: true
    delete:
      operationId: UntagResource
      description: >-
        Removes tags from a Lambda function. Requires the function ARN (Amazon
        Resource Name). For more information, see Tagging
        Lambda Functions in the AWS Lambda Developer Guide.
      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: ARN
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
        required: true
  '/2015-03-31/functions/{FunctionName}/versions':
    get:
      operationId: ListVersionsByFunction
      description: >-
        List all versions of a function. For information about the versioning
        feature, see AWS
        Lambda Function Versioning and Aliases.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVersionsByFunctionResponse'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVersionsByFunctionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: PublishVersion
      description: >-
        Publishes a version of your function from the current snapshot of
        $LATEST. That is, AWS Lambda takes a snapshot of the function code and
        configuration information from $LATEST and publishes a new version. The
        code and configuration cannot be modified after publication. For
        information about the versioning feature, see AWS
        Lambda Function Versioning and Aliases.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeStorageExceededException'
        '485':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishVersionRequest'
        required: true
  '/2015-03-31/functions/{FunctionName}/policy/{StatementId}':
    delete:
      operationId: RemovePermission
      description: >-

You can remove individual permissions from an resource policy
        associated with a Lambda function by providing a statement ID that you
        provided when you added the permission.


If you are using
        versioning, the permissions you remove are specific to the Lambda
        function version or alias you specify in the AddPermission
        request via the Qualifier parameter. For more information
        about versioning, see AWS
        Lambda Function Versioning and Aliases.


Note that removal of
        a permission will cause an active event source to lose permission to the
        function.


You need permission for the
        lambda:RemovePermission action.


      responses:
        '204':
          description: Success
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
        - name: StatementId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePermissionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/2015-03-31/functions/{FunctionName}/code':
    put:
      operationId: UpdateFunctionCode
      description: >-

Updates the code for the specified Lambda function. This operation
        must only be used on an existing Lambda function and cannot be used to
        update the function configuration.


If you are using the
        versioning feature, note this API will always update the $LATEST version
        of your Lambda function. For information about the versioning feature,
        see AWS
        Lambda Function Versioning and Aliases.


This operation
        requires permission for the lambda:UpdateFunctionCode
        action.


      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionConfiguration'
        '480':
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterValueException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: CodeStorageExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeStorageExceededException'
        '485':
          description: PreconditionFailedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
      parameters:
        - name: FunctionName
          in: path
          required: true
          schema:
            type: string
        - name: FunctionName
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionCodeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AccountLimit:
      type: object
      properties:
        TotalCodeSize:
          $ref: '#/components/schemas/Long'
          description: >-
            Maximum size, in bytes, of a code package you can upload per region.
            The default size is 75 GB.
        CodeSizeUnzipped:
          $ref: '#/components/schemas/Long'
          description: >-
            Size, in bytes, of code/dependencies that you can zip into a
            deployment package (uncompressed zip/jar size) for uploading. The
            default limit is 250 MB.
        CodeSizeZipped:
          $ref: '#/components/schemas/Long'
          description: >-
            Size, in bytes, of a single zipped code/dependencies package you can
            upload for your Lambda function(.zip/.jar file). Try using Amazon S3
            for uploading larger files. Default limit is 50 MB.
        ConcurrentExecutions:
          $ref: '#/components/schemas/Integer'
          description: >-
            Number of simultaneous executions of your function per region. For
            more information or to request a limit increase for concurrent
            executions, see Lambda
            Function Concurrent Executions. The default limit is 1000.
        UnreservedConcurrentExecutions:
          $ref: '#/components/schemas/UnreservedConcurrentExecutions'
          description: >-
            The number of concurrent executions available to functions that do
            not have concurrency limits set. For more information, see
            concurrent-executions.
      description: >-
        Provides limits of code size and concurrency associated with the current
        account and region.
    AccountUsage:
      type: object
      properties:
        TotalCodeSize:
          $ref: '#/components/schemas/Long'
          description: >-
            Total size, in bytes, of the account's deployment packages per
            region.
        FunctionCount:
          $ref: '#/components/schemas/Long'
          description: The number of your account's existing functions per region.
      description: >-
        Provides code size usage and function count associated with the current
        account and region.
    Action:
      type: string
      pattern: '(lambda:[*]|lambda:[a-zA-Z]+|[*])'
    AddPermissionRequest:
      type: object
      required:
        - StatementId
        - Action
        - Principal
      example:
        Action: 'lambda:InvokeFunction'
        FunctionName: MyFunction
        Principal: s3.amazonaws.com
        SourceAccount: '123456789012'
        SourceArn: 'arn:aws:s3:::examplebucket/*'
        StatementId: ID-1
      properties:
        StatementId:
          $ref: '#/components/schemas/StatementId'
          description: A unique statement identifier.
        Action:
          $ref: '#/components/schemas/Action'
          description: >-
            The AWS Lambda action you want to allow in this statement. Each
            Lambda action is a string starting with lambda:
            followed by the API name . For example,
            lambda:CreateFunction. You can use wildcard
            (lambda:*) to grant permission for all AWS Lambda
            actions.
        Principal:
          $ref: '#/components/schemas/Principal'
          description: >-
            The principal who is getting this permission. It can be Amazon S3
            service Principal (s3.amazonaws.com) if you want Amazon
            S3 to invoke the function, an AWS account ID if you are granting
            cross-account permission, or any valid AWS service principal such as
            sns.amazonaws.com. For example, you might want to allow
            a custom application in another AWS account to push events to AWS
            Lambda by invoking your function.
        SourceArn:
          $ref: '#/components/schemas/Arn'
          description: >-

This is optional; however, when granting permission to invoke
            your function, you should specify this field with the Amazon
            Resource Name (ARN) as its value. This ensures that only events
            generated from the specified source can invoke the function.



If you add a permission without providing the source
            ARN, any AWS account that creates a mapping to your function ARN can
            send events to invoke your Lambda function.


        SourceAccount:
          $ref: '#/components/schemas/SourceOwner'
          description: >-
            This parameter is used for S3 and SES. The AWS account ID (without a
            hyphen) of the source owner. For example, if the
            SourceArn identifies a bucket, then this is the bucket
            owner's account ID. You can use this additional condition to ensure
            the bucket you specify is owned by a specific account (it is
            possible the bucket owner deleted the bucket and some other AWS
            account created the bucket). You can also use this condition to
            specify all sources (that is, you don't specify the
            SourceArn) owned by a specific account.
        EventSourceToken:
          $ref: '#/components/schemas/EventSourceToken'
          description: >-
            A unique token that must be supplied by the principal invoking the
            function. This is currently only used for Alexa Smart Home
            functions.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: >-
            An optional value you can use to ensure you are updating the latest
            update of the function version or alias. If the
            RevisionID you pass doesn't match the latest
            RevisionId of the function or alias, it will fail with
            an error message, advising you to retrieve the latest function
            version or alias RevisionID using either or .
      description:

    AddPermissionResponse:
      type: object
      example:
        Statement: ID-1
      properties:
        Statement:
          $ref: '#/components/schemas/String'
          description: >-
            The permission statement you specified in the request. The response
            returns the same as a string using a backslash ("\") as an escape
            character in the JSON.
      description:


    AdditionalVersion:
      type: string
      pattern: '[0-9]+'
      minLength: 1
      maxLength: 1024
    AdditionalVersionWeights:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/AdditionalVersion'
          value:
            $ref: '#/components/schemas/Weight'
    Alias:
      type: string
      pattern: '(?!^[0-9]+$)([a-zA-Z0-9-_]+)'
      minLength: 1
      maxLength: 128
    AliasConfiguration:
      type: object
      example:
        AliasArn: 'arn:aws:lambda:us-west-2:123456789012:function:functionAlias'
        Description: ''
        FunctionVersion: '1'
        Name: functionAlias
      properties:
        AliasArn:
          $ref: '#/components/schemas/FunctionArn'
          description: >-
            Lambda function ARN that is qualified using the alias name as the
            suffix. For example, if you create an alias called BETA
            that points to a helloworld function version, the ARN is
            arn:aws:lambda:aws-regions:acct-id:function:helloworld:BETA.
        Name:
          $ref: '#/components/schemas/Alias'
          description: Alias name.
        FunctionVersion:
          $ref: '#/components/schemas/Version'
          description: Function version to which the alias points.
        Description:
          $ref: '#/components/schemas/Description'
          description: Alias description.
        RoutingConfig:
          $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: >-
            Specifies an additional function versions the alias points to,
            allowing you to dictate what percentage of traffic will invoke each
            version. For more information, see
            lambda-traffic-shifting-using-aliases.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: Represents the latest updated revision of the function or alias.
      description: >-
        Provides configuration information about a Lambda function version
        alias.
    AliasList:
      type: array
      items:
        $ref: '#/components/schemas/AliasConfiguration'
    AliasRoutingConfiguration:
      type: object
      properties:
        AdditionalVersionWeights:
          $ref: '#/components/schemas/AdditionalVersionWeights'
          description: >-
            Set this value to dictate what percentage of traffic will invoke the
            updated function version. If set to an empty string, 100 percent of
            traffic will invoke function-version. For more
            information, see lambda-traffic-shifting-using-aliases.
      description: >-
        The parent object that implements what percentage of traffic will invoke
        each function version. For more information, see
        lambda-traffic-shifting-using-aliases.
    Arn:
      type: string
      pattern: 'arn:aws:([a-zA-Z0-9\-])+:([a-z]{2}-[a-z]+-\d{1})?:(\d{12})?:(.*)'
    BatchSize:
      type: integer
      minimum: 1
      maximum: 10000
    Blob:
      type: string
      format: password
    BlobStream:
      type: string
    Boolean:
      type: boolean
    CodeStorageExceededException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
          description:


        message:
          $ref: '#/components/schemas/String'
      description: >-
        You have exceeded your maximum total code size per account. Limits
    Concurrency:
      type: object
      properties:
        ReservedConcurrentExecutions:
          $ref: '#/components/schemas/ReservedConcurrentExecutions'
          description: >-
            The number of concurrent executions reserved for this function. For
            more information, see concurrent-executions.
    CreateAliasRequest:
      type: object
      required:
        - Name
        - FunctionVersion
      properties:
        Name:
          $ref: '#/components/schemas/Alias'
          description: Name for the alias you are creating.
        FunctionVersion:
          $ref: '#/components/schemas/Version'
          description: Lambda function version for which you are creating the alias.
        Description:
          $ref: '#/components/schemas/Description'
          description: Description of the alias.
        RoutingConfig:
          $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: >-
            Specifies an additional version your alias can point to, allowing
            you to dictate what percentage of traffic will invoke each version.
            For more information, see
            lambda-traffic-shifting-using-aliases.
    CreateEventSourceMappingRequest:
      type: object
      required:
        - EventSourceArn
        - FunctionName
        - StartingPosition
      properties:
        EventSourceArn:
          $ref: '#/components/schemas/Arn'
          description: >-
            The Amazon Resource Name (ARN) of the Amazon Kinesis or the Amazon
            DynamoDB stream that is the event source. Any record added to this
            stream could cause AWS Lambda to invoke your Lambda function, it
            depends on the BatchSize. AWS Lambda POSTs the Amazon
            Kinesis event, containing records, to your Lambda function as JSON.
        FunctionName:
          $ref: '#/components/schemas/FunctionName'
          description: >-


The Lambda function to invoke when AWS Lambda detects an event on
            the stream.


 You can specify the function name (for example,
            Thumbnail) or you can specify Amazon Resource Name
            (ARN) of the function (for example,
            arn:aws:lambda:us-west-2:account-id:function:ThumbNail).



 If you are using versioning, you can also provide a
            qualified function ARN (ARN that is qualified with function version
            or alias name as suffix). For more information about versioning, see
            AWS
            Lambda Function Versioning and Aliases


AWS Lambda also
            allows you to specify only the function name with the account ID
            qualifier (for example, account-id:Thumbnail).



Note that the length constraint applies only to the ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.


        Enabled:
          $ref: '#/components/schemas/Enabled'
          description: >-
            Indicates whether AWS Lambda should begin polling the event source.
            By default, Enabled is true.
        BatchSize:
          $ref: '#/components/schemas/BatchSize'
          description: >-
            The largest number of records that AWS Lambda will retrieve from
            your event source at the time of invoking your function. Your
            function receives an event with all the retrieved records. The
            default is 100 records.
        StartingPosition:
          $ref: '#/components/schemas/EventSourcePosition'
          description: >-
            The position in the DynamoDB or Kinesis stream where AWS Lambda
            should start reading. For more information, see GetShardIterator
            in the Amazon Kinesis API Reference Guide or GetShardIterator
            in the Amazon DynamoDB API Reference Guide. The
            AT_TIMESTAMP value is supported only for Kinesis
            streams.
        StartingPositionTimestamp:
          $ref: '#/components/schemas/Date'
          description: >-
            The timestamp of the data record from which to start reading. Used
            with shard
            iterator type AT_TIMESTAMP. If a record with this exact
            timestamp does not exist, the iterator returned is for the next
            (later) record. If the timestamp is older than the current trim
            horizon, the iterator returned is for the oldest untrimmed data
            record (TRIM_HORIZON). Valid only for Kinesis
            streams.
      description:

    CreateFunctionRequest:
      type: object
      required:
        - FunctionName
        - Runtime
        - Role
        - Handler
        - Code
      example:
        Code: {}
        Description: ''
        FunctionName: MyFunction
        Handler: souce_file.handler_name
        MemorySize: 128
        Publish: true
        Role: 'arn:aws:iam::123456789012:role/service-role/role-name'
        Runtime: nodejs4.3
        Timeout: 15
        VpcConfig: {}
      properties:
        FunctionName:
          $ref: '#/components/schemas/FunctionName'
          description: >-
            The name you want to assign to the function you are uploading. The
            function names appear in the console and are returned in the
            ListFunctions API. Function names are used to specify
            functions to other AWS Lambda API operations, such as Invoke.
            Note that the length constraint applies only to the ARN. If you
            specify only the function name, it is limited to 64 characters in
            length.
        Runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-


The runtime environment for the Lambda function you are
            uploading.


To use the Python runtime v3.6, set the value to
            "python3.6". To use the Python runtime v2.7, set the value to
            "python2.7". To use the Node.js runtime v6.10, set the value to
            "nodejs6.10". To use the Node.js runtime v4.3, set the value to
            "nodejs4.3". To use the .NET Core runtime v1.0, set the value to
            "dotnetcore1.0". To use the .NET Core runtime v2.0, set the value to
            "dotnetcore2.0".


Node v0.10.42 is currently marked as
            deprecated. You must migrate existing functions to the newer Node.js
            runtime versions available on AWS Lambda (nodejs4.3 or nodejs6.10)
            as soon as possible. Failure to do so will result in an invalid
            parameter error being returned. Note that you will have to follow
            this procedure for each region that contains functions written in
            the Node v0.10.42 runtime.


        Role:
          $ref: '#/components/schemas/RoleArn'
          description: >-
            The Amazon Resource Name (ARN) of the IAM role that Lambda assumes
            when it executes your function to access any other Amazon Web
            Services (AWS) resources. For more information, see AWS
            Lambda: How it Works.
        Handler:
          $ref: '#/components/schemas/Handler'
          description: >-
            The function within your code that Lambda calls to begin execution.
            For Node.js, it is the module-name.export value in
            your function. For Java, it can be
            package.class-name::handler or
            package.class-name. For more information, see Lambda
            Function Handler (Java).
        Code:
          $ref: '#/components/schemas/FunctionCode'
          description: The code for the Lambda function.
        Description:
          $ref: '#/components/schemas/Description'
          description: >-
            A short, user-defined function description. Lambda does not use this
            value. Assign a meaningful description as you see fit.
        Timeout:
          $ref: '#/components/schemas/Timeout'
          description: >-
            The function execution time at which Lambda should terminate the
            function. Because the execution time has cost implications, we
            recommend you set this value based on your expected execution time.
            The default is 3 seconds.
        MemorySize:
          $ref: '#/components/schemas/MemorySize'
          description: >-
            The amount of memory, in MB, your Lambda function is given. Lambda
            uses this memory size to infer the amount of CPU and memory
            allocated to your function. Your function use-case determines your
            CPU and memory requirements. For example, a database operation might
            need less memory compared to an image processing function. The
            default value is 128 MB. The value must be a multiple of 64 MB.
        Publish:
          $ref: '#/components/schemas/Boolean'
          description: >-
            This boolean parameter can be used to request AWS Lambda to create
            the Lambda function and publish a version as an atomic operation.
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
          description: >-
            If your Lambda function accesses resources in a VPC, you provide
            this parameter identifying the list of security group IDs and subnet
            IDs. These must belong to the same VPC. You must provide at least
            one security group and one subnet ID.
        DeadLetterConfig:
          $ref: '#/components/schemas/DeadLetterConfig'
          description: >-
            The parent object that contains the target ARN (Amazon Resource
            Name) of an Amazon SQS queue or Amazon SNS topic. For more
            information, see dlq.
        Environment:
          $ref: '#/components/schemas/Environment'
        KMSKeyArn:
          $ref: '#/components/schemas/KMSKeyArn'
          description: >-
            The Amazon Resource Name (ARN) of the KMS key used to encrypt your
            function's environment variables. If not provided, AWS Lambda will
            use a default service key.
        TracingConfig:
          $ref: '#/components/schemas/TracingConfig'
          description: The parent object that contains your function's tracing settings.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: >-
            The list of tags (key-value pairs) assigned to the new function. For
            more information, see Tagging
            Lambda Functions in the AWS Lambda Developer Guide.
      description:

    Date:
      type: string
      format: date-time
    DeadLetterConfig:
      type: object
      properties:
        TargetArn:
          $ref: '#/components/schemas/ResourceArn'
          description: >-
            The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS
            topic you specify as your Dead Letter Queue (DLQ). dlq. For
            more information, see dlq.
      description: >-
        The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS
        topic you specify as your Dead Letter Queue (DLQ). For more information,
        see dlq.
    DeleteAliasRequest:
      type: object
      example:
        FunctionName: myFunction
        Name: alias
      properties: {}
    DeleteEventSourceMappingRequest:
      type: object
      example:
        UUID: 12345kxodurf3443
      properties: {}
      description:


    DeleteFunctionConcurrencyRequest:
      type: object
      properties: {}
    DeleteFunctionRequest:
      type: object
      example:
        FunctionName: myFunction
        Qualifier: '1'
      properties: {}
    Description:
      type: string
      minLength: 0
      maxLength: 256
    EC2AccessDeniedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description:


    EC2ThrottledException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        AWS Lambda was throttled by Amazon EC2 during Lambda function
        initialization using the execution role provided for the Lambda
        function.
    EC2UnexpectedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
        EC2ErrorCode:
          $ref: '#/components/schemas/String'
      description: >-
        AWS Lambda received an unexpected EC2 client exception while setting up
        for the Lambda function.
    ENILimitReachedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        AWS Lambda was not able to create an Elastic Network Interface (ENI) in
        the VPC, specified as part of Lambda function configuration, because the
        limit for network interfaces has been reached.
    Enabled:
      type: boolean
    Environment:
      type: object
      properties:
        Variables:
          $ref: '#/components/schemas/EnvironmentVariables'
          description: >-
            The key-value pairs that represent your environment's configuration
            settings.
      description: >-
        The parent object that contains your environment's configuration
        settings.
    EnvironmentError:
      type: object
      properties:
        ErrorCode:
          $ref: '#/components/schemas/String'
          description: The error code returned by the environment error object.
        Message:
          $ref: '#/components/schemas/SensitiveString'
          description: The message returned by the environment error object.
      description: >-
        The parent object that contains error information associated with your
        configuration settings.
    EnvironmentResponse:
      type: object
      properties:
        Variables:
          $ref: '#/components/schemas/EnvironmentVariables'
          description: >-
            The key-value pairs returned that represent your environment's
            configuration settings or error information.
        Error:
          $ref: '#/components/schemas/EnvironmentError'
      description: >-
        The parent object returned that contains your environment's
        configuration settings or any error information associated with your
        configuration settings.
    EnvironmentVariableName:
      type: string
      pattern: '[a-zA-Z]([a-zA-Z0-9_])+'
      format: password
    EnvironmentVariableValue:
      type: string
      format: password
    EnvironmentVariables:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/EnvironmentVariableName'
          value:
            $ref: '#/components/schemas/EnvironmentVariableValue'
    EventSourceMappingConfiguration:
      type: object
      example:
        BatchSize: 123
        EventSourceArn: 'arn:aws:s3:::examplebucket/*'
        FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
        LastModified: '2016-11-21T19:49:20.006+0000'
        LastProcessingResult: ''
        State: ''
        StateTransitionReason: ''
        UUID: 1234xCy789012
      properties:
        UUID:
          $ref: '#/components/schemas/String'
          description: The AWS Lambda assigned opaque identifier for the mapping.
        BatchSize:
          $ref: '#/components/schemas/BatchSize'
          description: >-
            The largest number of records that AWS Lambda will retrieve from
            your event source at the time of invoking your function. Your
            function receives an event with all the retrieved records.
        EventSourceArn:
          $ref: '#/components/schemas/Arn'
          description: >-
            The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is
            the source of events.
        FunctionArn:
          $ref: '#/components/schemas/FunctionArn'
          description: >-
            The Lambda function to invoke when AWS Lambda detects an event on
            the stream.
        LastModified:
          $ref: '#/components/schemas/Date'
          description: >-
            The UTC time string indicating the last time the event mapping was
            updated.
        LastProcessingResult:
          $ref: '#/components/schemas/String'
          description: >-
            The result of the last AWS Lambda invocation of your Lambda
            function.
        State:
          $ref: '#/components/schemas/String'
          description: >-
            The state of the event source mapping. It can be
            Creating, Enabled, Disabled,
            Enabling, Disabling,
            Updating, or Deleting.
        StateTransitionReason:
          $ref: '#/components/schemas/String'
          description: >-
            The reason the event source mapping is in its current state. It is
            either user-requested or an AWS Lambda-initiated state transition.
      description: >-
        Describes mapping between an Amazon Kinesis stream and a Lambda
        function.
    EventSourceMappingsList:
      type: array
      items:
        $ref: '#/components/schemas/EventSourceMappingConfiguration'
    EventSourcePosition:
      type: string
      enum:
        - TRIM_HORIZON
        - LATEST
        - AT_TIMESTAMP
    EventSourceToken:
      type: string
      pattern: '[a-zA-Z0-9._\-]+'
      minLength: 0
      maxLength: 256
    FunctionArn:
      type: string
      pattern: >-
        arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
    FunctionCode:
      type: object
      properties:
        ZipFile:
          $ref: '#/components/schemas/Blob'
          description: >-
            The contents of your zip file containing your deployment package. If
            you are using the web API directly, the contents of the zip file
            must be base64-encoded. If you are using the AWS SDKs or the AWS
            CLI, the SDKs or CLI will do the encoding for you. For more
            information about creating a .zip file, see Execution
            Permissions in the AWS Lambda Developer Guide.
        S3Bucket:
          $ref: '#/components/schemas/S3Bucket'
          description: >-
            Amazon S3 bucket name where the .zip file containing your deployment
            package is stored. This bucket must reside in the same AWS region
            where you are creating the Lambda function.
        S3Key:
          $ref: '#/components/schemas/S3Key'
          description: >-
            The Amazon S3 object (the deployment package) key name you want to
            upload.
        S3ObjectVersion:
          $ref: '#/components/schemas/S3ObjectVersion'
          description: >-
            The Amazon S3 object (the deployment package) version you want to
            upload.
      description: The code for the Lambda function.
    FunctionCodeLocation:
      type: object
      properties:
        RepositoryType:
          $ref: '#/components/schemas/String'
          description: The repository from which you can download the function.
        Location:
          $ref: '#/components/schemas/String'
          description: >-
            The presigned URL you can use to download the function's .zip file
            that you previously uploaded. The URL is valid for up to 10 minutes.
      description: The object for the Lambda function location.
    FunctionConfiguration:
      type: object
      example:
        CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
        CodeSize: 123
        Description: ''
        FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
        FunctionName: myFunction
        Handler: index.handler
        LastModified: '2016-11-21T19:49:20.006+0000'
        MemorySize: 128
        Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
        Runtime: python2.7
        Timeout: 123
        Version: '1'
        VpcConfig: {}
      properties:
        FunctionName:
          $ref: '#/components/schemas/NamespacedFunctionName'
          description: >-
            The name of the function. Note that the length constraint applies
            only to the ARN. If you specify only the function name, it is
            limited to 64 characters in length.
        FunctionArn:
          $ref: '#/components/schemas/NameSpacedFunctionArn'
          description: The Amazon Resource Name (ARN) assigned to the function.
        Runtime:
          $ref: '#/components/schemas/Runtime'
          description: The runtime environment for the Lambda function.
        Role:
          $ref: '#/components/schemas/RoleArn'
          description: >-
            The Amazon Resource Name (ARN) of the IAM role that Lambda assumes
            when it executes your function to access any other Amazon Web
            Services (AWS) resources.
        Handler:
          $ref: '#/components/schemas/Handler'
          description: The function Lambda calls to begin executing your function.
        CodeSize:
          $ref: '#/components/schemas/Long'
          description: 'The size, in bytes, of the function .zip file you uploaded.'
        Description:
          $ref: '#/components/schemas/Description'
          description: The user-provided description.
        Timeout:
          $ref: '#/components/schemas/Timeout'
          description: >-
            The function execution time at which Lambda should terminate the
            function. Because the execution time has cost implications, we
            recommend you set this value based on your expected execution time.
            The default is 3 seconds.
        MemorySize:
          $ref: '#/components/schemas/MemorySize'
          description: >-
            The memory size, in MB, you configured for the function. Must be a
            multiple of 64 MB.
        LastModified:
          $ref: '#/components/schemas/Timestamp'
          description: >-
            The time stamp of the last time you updated the function. The time
            stamp is conveyed as a string complying with ISO-8601 in this way
            YYYY-MM-DDThh:mm:ssTZD (e.g., 1997-07-16T19:20:30+01:00). For more
            information, see Date
            and Time Formats.
        CodeSha256:
          $ref: '#/components/schemas/String'
          description: It is the SHA256 hash of your function deployment package.
        Version:
          $ref: '#/components/schemas/Version'
          description: The version of the Lambda function.
        VpcConfig:
          $ref: '#/components/schemas/VpcConfigResponse'
          description: VPC configuration associated with your Lambda function.
        DeadLetterConfig:
          $ref: '#/components/schemas/DeadLetterConfig'
          description: >-
            The parent object that contains the target ARN (Amazon Resource
            Name) of an Amazon SQS queue or Amazon SNS topic. For more
            information, see dlq.
        Environment:
          $ref: '#/components/schemas/EnvironmentResponse'
          description: >-
            The parent object that contains your environment's configuration
            settings.
        KMSKeyArn:
          $ref: '#/components/schemas/KMSKeyArn'
          description: >-
            The Amazon Resource Name (ARN) of the KMS key used to encrypt your
            function's environment variables. If empty, it means you are using
            the AWS Lambda default service key.
        TracingConfig:
          $ref: '#/components/schemas/TracingConfigResponse'
          description: The parent object that contains your function's tracing settings.
        MasterArn:
          $ref: '#/components/schemas/FunctionArn'
          description: Returns the ARN (Amazon Resource Name) of the master function.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: Represents the latest updated revision of the function or alias.
      description: A complex type that describes function metadata.
    FunctionList:
      type: array
      items:
        $ref: '#/components/schemas/FunctionConfiguration'
    FunctionName:
      type: string
      pattern: >-
        (arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      minLength: 1
      maxLength: 140
    FunctionVersion:
      type: string
      enum:
        - ALL
    GetAccountSettingsRequest:
      type: object
      example: {}
      properties: {}
    GetAccountSettingsResponse:
      type: object
      example:
        AccountLimit: {}
        AccountUsage: {}
      properties:
        AccountLimit:
          $ref: '#/components/schemas/AccountLimit'
        AccountUsage:
          $ref: '#/components/schemas/AccountUsage'
    GetAliasRequest:
      type: object
      example:
        FunctionName: myFunction
        Name: myFunctionAlias
      properties: {}
    GetEventSourceMappingRequest:
      type: object
      example:
        UUID: 123489-xxxxx-kdla8d89d7
      properties: {}
      description:


    GetFunctionConfigurationRequest:
      type: object
      example:
        FunctionName: myFunction
        Qualifier: '1'
      properties: {}
      description:


    GetFunctionRequest:
      type: object
      example:
        FunctionName: myFunction
        Qualifier: '1'
      properties: {}
      description:


    GetFunctionResponse:
      type: object
      example:
        Code:
          Location: somelocation
          RepositoryType: S3
        Configuration:
          CodeSha256: LQT+0DHxxxxcfwLyQjzoEFKZtdqQjHXanlSdfXBlEW0VA=
          CodeSize: 262
          Description: A starter AWS Lambda function.
          Environment:
            Variables:
              S3_BUCKET: test
          FunctionArn: 'arn:aws:lambda:us-west-2:123456789012:function:myFunction'
          FunctionName: myFunction
          Handler: index.handler
          LastModified: '2016-11-21T19:49:20.006+0000'
          MemorySize: 128
          Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
          Runtime: nodejs4.3
          Timeout: 3
          Version: $LATEST
          VpcConfig:
            SecurityGroupIds: []
            SubnetIds: []
      properties:
        Configuration:
          $ref: '#/components/schemas/FunctionConfiguration'
        Code:
          $ref: '#/components/schemas/FunctionCodeLocation'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: >-
            Returns the list of tags associated with the function. For more
            information, see Tagging
            Lambda Functions in the AWS Lambda Developer Guide.
        Concurrency:
          $ref: '#/components/schemas/Concurrency'
          description: >-
            The concurrent execution limit set for this function. For more
            information, see concurrent-executions.
      description: >-
        This response contains the object for the Lambda function location (see
        FunctionCodeLocation.
    GetPolicyRequest:
      type: object
      example:
        FunctionName: myFunction
        Qualifier: '1'
      properties: {}
      description:


    GetPolicyResponse:
      type: object
      example:
        Policy: ''
      properties:
        Policy:
          $ref: '#/components/schemas/String'
          description: >-
            The resource policy associated with the specified function. The
            response returns the same as a string using a backslash ("\") as an
            escape character in the JSON.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: Represents the latest updated revision of the function or alias.
      description:


    Handler:
      type: string
      pattern: '[^\s]+'
      maxLength: 128
    HttpStatus:
      type: integer
    Integer:
      type: integer
    InvalidParameterValueException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
          description:


        message:
          $ref: '#/components/schemas/String'
          description:


      description: >-
        One of the parameters in the request is invalid. For example, if you
        provided an IAM role for AWS Lambda to assume in the
        CreateFunction or the
        UpdateFunctionConfiguration API, that AWS Lambda is unable
        to assume you will get this exception.
    InvalidRequestContentException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
          description:


        message:
          $ref: '#/components/schemas/String'
          description:


      description: The request body could not be parsed as JSON.
    InvalidRuntimeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: The runtime or runtime version specified is not supported.
    InvalidSecurityGroupIDException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        The Security Group ID provided in the Lambda function VPC configuration
        is invalid.
    InvalidSubnetIDException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        The Subnet ID provided in the Lambda function VPC configuration is
        invalid.
    InvalidZipFileException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: AWS Lambda could not unzip the function zip file.
    InvocationRequest:
      type: object
      example:
        ClientContext: MyApp
        FunctionName: MyFunction
        InvocationType: Event
        LogType: Tail
        Payload: 'fileb://file-path/input.json'
        Qualifier: '1'
      properties:
        Payload:
          $ref: '#/components/schemas/Blob'
          description: JSON that you want to provide to your Lambda function as input.
      description:


    InvocationResponse:
      type: object
      example:
        FunctionError: ''
        LogResult: ''
        Payload: '?'
        StatusCode: 123
      properties:
        Payload:
          $ref: '#/components/schemas/Blob'
          description: >-


 It is the JSON representation of the object returned by the
            Lambda function. This is present only if the invocation type is
            RequestResponse.


In the event of a function
            error this field contains a message describing the error. For the
            Handled errors the Lambda function will report this
            message. For Unhandled errors AWS Lambda reports the
            message.


      description: 'Upon success, returns an empty response. Otherwise, throws an exception.'
    InvocationType:
      type: string
      enum:
        - Event
        - RequestResponse
        - DryRun
    InvokeAsyncRequest:
      type: object
      required:
        - InvokeArgs
      example:
        FunctionName: myFunction
        InvokeArgs: 'fileb://file-path/input.json'
      properties:
        InvokeArgs:
          $ref: '#/components/schemas/BlobStream'
          description: JSON that you want to provide to your Lambda function as input.
      description:

    InvokeAsyncResponse:
      type: object
      example:
        Status: 123
      properties: {}
      description: 'Upon success, it returns empty response. Otherwise, throws an exception.'
    KMSAccessDeniedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        Lambda was unable to decrypt the environment variables because KMS
        access was denied. Check the Lambda function's KMS permissions.
    KMSDisabledException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        Lambda was unable to decrypt the environment variables because the KMS
        key used is disabled. Check the Lambda function's KMS key settings.
    KMSInvalidStateException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        Lambda was unable to decrypt the environment variables because the KMS
        key used is in an invalid state for Decrypt. Check the function's KMS
        key settings.
    KMSKeyArn:
      type: string
      pattern: '(arn:aws:[a-z0-9-.]+:.*)|()'
    KMSNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        Lambda was unable to decrypt the environment variables because the KMS
        key was not found. Check the function's KMS key settings.
    ListAliasesRequest:
      type: object
      example:
        FunctionName: myFunction
        FunctionVersion: '1'
        Marker: ''
        MaxItems: 123
      properties: {}
    ListAliasesResponse:
      type: object
      example:
        Aliases: []
        NextMarker: ''
      properties:
        NextMarker:
          $ref: '#/components/schemas/String'
          description: 'A string, present if there are more aliases.'
        Aliases:
          $ref: '#/components/schemas/AliasList'
          description: A list of aliases.
    ListEventSourceMappingsRequest:
      type: object
      properties: {}
      description:


    ListEventSourceMappingsResponse:
      type: object
      properties:
        NextMarker:
          $ref: '#/components/schemas/String'
          description: 'A string, present if there are more event source mappings.'
        EventSourceMappings:
          $ref: '#/components/schemas/EventSourceMappingsList'
          description: An array of EventSourceMappingConfiguration objects.
      description: >-
        Contains a list of event sources (see
        EventSourceMappingConfiguration)
    ListFunctionsRequest:
      type: object
      example:
        Marker: ''
        MaxItems: 123
      properties: {}
      description:


    ListFunctionsResponse:
      type: object
      example:
        Functions: []
        NextMarker: ''
      properties:
        NextMarker:
          $ref: '#/components/schemas/String'
          description: 'A string, present if there are more functions.'
        Functions:
          $ref: '#/components/schemas/FunctionList'
          description: A list of Lambda functions.
      description: >-
        Contains a list of AWS Lambda function configurations (see
        FunctionConfiguration.
    ListTagsRequest:
      type: object
      properties: {}
    ListTagsResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/Tags'
          description: >-
            The list of tags assigned to the function. For more information, see
            Tagging
            Lambda Functions in the AWS Lambda Developer Guide.
    ListVersionsByFunctionRequest:
      type: object
      example:
        FunctionName: myFunction
        Marker: ''
        MaxItems: 123
      properties: {}
      description:


    ListVersionsByFunctionResponse:
      type: object
      example:
        NextMarker: ''
        Versions: []
      properties:
        NextMarker:
          $ref: '#/components/schemas/String'
          description: 'A string, present if there are more function versions.'
        Versions:
          $ref: '#/components/schemas/FunctionList'
          description: A list of Lambda function versions.
      description:


    LogType:
      type: string
      enum:
        - None
        - Tail
    Long:
      type: integer
    MasterRegion:
      type: string
      pattern: 'ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}'
    MaxListItems:
      type: integer
      minimum: 1
      maximum: 10000
    MemorySize:
      type: integer
      minimum: 128
      maximum: 3008
    NameSpacedFunctionArn:
      type: string
      pattern: >-
        arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
    NamespacedFunctionName:
      type: string
      pattern: >-
        (arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
      minLength: 1
      maxLength: 170
    NamespacedStatementId:
      type: string
      pattern: '([a-zA-Z0-9-_.]+)'
      minLength: 1
      maxLength: 100
    PolicyLengthExceededException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: Lambda function access policy is limited to 20 KB.
    PreconditionFailedException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
          description:


        message:
          $ref: '#/components/schemas/String'
          description:


      description: >-
        The RevisionId provided does not match the latest RevisionId for the
        Lambda function or alias. Call the GetFunction or the
        GetAlias API to retrieve the latest RevisionId for your
        resource.
    Principal:
      type: string
      pattern: .*
    PublishVersionRequest:
      type: object
      example:
        CodeSha256: ''
        Description: ''
        FunctionName: myFunction
      properties:
        CodeSha256:
          $ref: '#/components/schemas/String'
          description: >-
            The SHA256 hash of the deployment package you want to publish. This
            provides validation on the code you are publishing. If you provide
            this parameter, the value must match the SHA256 of the $LATEST
            version for the publication to succeed. You can use the
            DryRun parameter of UpdateFunctionCode to verify the
            hash value that will be returned before publishing your new version.
        Description:
          $ref: '#/components/schemas/Description'
          description: >-
            The description for the version you are publishing. If not provided,
            AWS Lambda copies the description from the $LATEST version.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: >-
            An optional value you can use to ensure you are updating the latest
            update of the function version or alias. If the
            RevisionID you pass doesn't match the latest
            RevisionId of the function or alias, it will fail with
            an error message, advising you to retrieve the latest function
            version or alias RevisionID using either or .
      description:


    PutFunctionConcurrencyRequest:
      type: object
      required:
        - ReservedConcurrentExecutions
      properties:
        ReservedConcurrentExecutions:
          $ref: '#/components/schemas/ReservedConcurrentExecutions'
          description: >-
            The concurrent execution limit reserved for this function. For more
            information, see concurrent-executions.
    Qualifier:
      type: string
      pattern: '(|[a-zA-Z0-9$_-]+)'
      minLength: 1
      maxLength: 128
    RemovePermissionRequest:
      type: object
      example:
        FunctionName: myFunction
        Qualifier: '1'
        StatementId: role-statement-id
      properties: {}
      description:


    RequestTooLargeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: >-
        The request payload exceeded the Invoke request body JSON
        input limit. For more information, see Limits.
    ReservedConcurrentExecutions:
      type: integer
      minimum: 0
    ResourceArn:
      type: string
      pattern: '(arn:aws:[a-z0-9-.]+:.*)|()'
    ResourceConflictException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
          description:


        message:
          $ref: '#/components/schemas/String'
          description:


      description: The resource already exists.
    ResourceNotFoundException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        Message:
          $ref: '#/components/schemas/String'
      description: >-
        The resource (for example, a Lambda function or access policy statement)
        specified in the request does not exist.
    RoleArn:
      type: string
      pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
    Runtime:
      type: string
      enum:
        - nodejs
        - nodejs4.3
        - nodejs6.10
        - nodejs8.10
        - java8
        - python2.7
        - python3.6
        - dotnetcore1.0
        - dotnetcore2.0
        - nodejs4.3-edge
        - go1.x
    S3Bucket:
      type: string
      pattern: '^[0-9A-Za-z\.\-_]*(?-
        AWS Lambda was not able to set up VPC access for the Lambda function
        because one or more configured subnets has no available IP addresses.
    SubnetId:
      type: string
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
      maxItems: 16
    TagKey:
      type: string
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      required:
        - Tags
      properties:
        Tags:
          $ref: '#/components/schemas/Tags'
          description: >-
            The list of tags (key-value pairs) you are assigning to the Lambda
            function. For more information, see Tagging
            Lambda Functions in the AWS Lambda Developer Guide.
    TagValue:
      type: string
    Tags:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/TagKey'
          value:
            $ref: '#/components/schemas/TagValue'
    ThrottleReason:
      type: string
      enum:
        - ConcurrentInvocationLimitExceeded
        - FunctionInvocationRateLimitExceeded
        - ReservedFunctionConcurrentInvocationLimitExceeded
        - ReservedFunctionInvocationRateLimitExceeded
        - CallerRateLimitExceeded
    Timeout:
      type: integer
      minimum: 1
    Timestamp:
      type: string
    TooManyRequestsException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
        Reason:
          $ref: '#/components/schemas/ThrottleReason'
      description: ' '
    TracingConfig:
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/TracingMode'
          description: >-
            Can be either PassThrough or Active. If PassThrough, Lambda will
            only trace the request from an upstream service if it contains a
            tracing header with "sampled=1". If Active, Lambda will respect any
            tracing header it receives from an upstream service. If no tracing
            header is received, Lambda will call X-Ray for a tracing decision.
      description: The parent object that contains your function's tracing settings.
    TracingConfigResponse:
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/TracingMode'
          description: The tracing mode associated with your Lambda function.
      description: >-
        Parent object of the tracing information associated with your Lambda
        function.
    TracingMode:
      type: string
      enum:
        - Active
        - PassThrough
    UnreservedConcurrentExecutions:
      type: integer
      minimum: 0
    UnsupportedMediaTypeException:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The content type of the Invoke request body is not JSON.
    UntagResourceRequest:
      type: object
      properties: {}
    UpdateAliasRequest:
      type: object
      example:
        Description: ''
        FunctionName: myFunction
        FunctionVersion: '1'
        Name: functionAlias
      properties:
        FunctionVersion:
          $ref: '#/components/schemas/Version'
          description: >-
            Using this parameter you can change the Lambda function version to
            which the alias points.
        Description:
          $ref: '#/components/schemas/Description'
          description: You can change the description of the alias using this parameter.
        RoutingConfig:
          $ref: '#/components/schemas/AliasRoutingConfiguration'
          description: >-
            Specifies an additional version your alias can point to, allowing
            you to dictate what percentage of traffic will invoke each version.
            For more information, see
            lambda-traffic-shifting-using-aliases.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: >-
            An optional value you can use to ensure you are updating the latest
            update of the function version or alias. If the
            RevisionID you pass doesn't match the latest
            RevisionId of the function or alias, it will fail with
            an error message, advising you to retrieve the latest function
            version or alias RevisionID using either or .
    UpdateEventSourceMappingRequest:
      type: object
      example:
        BatchSize: 123
        Enabled: true
        FunctionName: myFunction
        UUID: 1234xCy789012
      properties:
        FunctionName:
          $ref: '#/components/schemas/FunctionName'
          description: >-


The Lambda function to which you want the stream records
            sent.


 You can specify a function name (for example,
            Thumbnail) or you can specify Amazon Resource Name
            (ARN) of the function (for example,
            arn:aws:lambda:us-west-2:account-id:function:ThumbNail).
            AWS Lambda also allows you to specify a partial ARN (for example,
            account-id:Thumbnail). Note that the length constraint
            applies only to the ARN. If you specify only the function name, it
            is limited to 64 characters in length.


If you are using
            versioning, you can also provide a qualified function ARN (ARN that
            is qualified with function version or alias name as suffix). For
            more information about versioning, see AWS
            Lambda Function Versioning and Aliases


Note that the
            length constraint applies only to the ARN. If you specify only the
            function name, it is limited to 64 character in length.


        Enabled:
          $ref: '#/components/schemas/Enabled'
          description: >-
            Specifies whether AWS Lambda should actively poll the stream or not.
            If disabled, AWS Lambda will not poll the stream.
        BatchSize:
          $ref: '#/components/schemas/BatchSize'
          description: >-
            The maximum number of stream records that can be sent to your Lambda
            function for a single invocation.
      description:

    UpdateFunctionCodeRequest:
      type: object
      example:
        FunctionName: myFunction
        Publish: true
        S3Bucket: myBucket
        S3Key: myKey
        S3ObjectVersion: '1'
        ZipFile: 'fileb://file-path/file.zip'
      properties:
        ZipFile:
          $ref: '#/components/schemas/Blob'
          description: >-
            The contents of your zip file containing your deployment package. If
            you are using the web API directly, the contents of the zip file
            must be base64-encoded. If you are using the AWS SDKs or the AWS
            CLI, the SDKs or CLI will do the encoding for you. For more
            information about creating a .zip file, see Execution
            Permissions.
        S3Bucket:
          $ref: '#/components/schemas/S3Bucket'
          description: >-
            Amazon S3 bucket name where the .zip file containing your deployment
            package is stored. This bucket must reside in the same AWS Region
            where you are creating the Lambda function.
        S3Key:
          $ref: '#/components/schemas/S3Key'
          description: >-
            The Amazon S3 object (the deployment package) key name you want to
            upload.
        S3ObjectVersion:
          $ref: '#/components/schemas/S3ObjectVersion'
          description: >-
            The Amazon S3 object (the deployment package) version you want to
            upload.
        Publish:
          $ref: '#/components/schemas/Boolean'
          description: >-
            This boolean parameter can be used to request AWS Lambda to update
            the Lambda function and publish a version as an atomic operation.
        DryRun:
          $ref: '#/components/schemas/Boolean'
          description: >-
            This boolean parameter can be used to test your request to AWS
            Lambda to update the Lambda function and publish a version as an
            atomic operation. It will do all necessary computation and
            validation of your code but will not upload it or a publish a
            version. Each time this operation is invoked, the
            CodeSha256 hash value of the provided code will also be
            computed and returned in the response.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: >-
            An optional value you can use to ensure you are updating the latest
            update of the function version or alias. If the
            RevisionID you pass doesn't match the latest
            RevisionId of the function or alias, it will fail with
            an error message, advising you to retrieve the latest function
            version or alias RevisionID using either or .
      description:


    UpdateFunctionConfigurationRequest:
      type: object
      example:
        Description: ''
        FunctionName: myFunction
        Handler: index.handler
        MemorySize: 128
        Role: 'arn:aws:iam::123456789012:role/lambda_basic_execution'
        Runtime: python2.7
        Timeout: 123
        VpcConfig: {}
      properties:
        Role:
          $ref: '#/components/schemas/RoleArn'
          description: >-
            The Amazon Resource Name (ARN) of the IAM role that Lambda will
            assume when it executes your function.
        Handler:
          $ref: '#/components/schemas/Handler'
          description: >-
            The function that Lambda calls to begin executing your function. For
            Node.js, it is the module-name.export value in your
            function.
        Description:
          $ref: '#/components/schemas/Description'
          description: >-
            A short user-defined function description. AWS Lambda does not use
            this value. Assign a meaningful description as you see fit.
        Timeout:
          $ref: '#/components/schemas/Timeout'
          description: >-
            The function execution time at which AWS Lambda should terminate the
            function. Because the execution time has cost implications, we
            recommend you set this value based on your expected execution time.
            The default is 3 seconds.
        MemorySize:
          $ref: '#/components/schemas/MemorySize'
          description: >-
            The amount of memory, in MB, your Lambda function is given. AWS
            Lambda uses this memory size to infer the amount of CPU allocated to
            your function. Your function use-case determines your CPU and memory
            requirements. For example, a database operation might need less
            memory compared to an image processing function. The default value
            is 128 MB. The value must be a multiple of 64 MB.
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        Environment:
          $ref: '#/components/schemas/Environment'
          description: >-
            The parent object that contains your environment's configuration
            settings.
        Runtime:
          $ref: '#/components/schemas/Runtime'
          description: >-


The runtime environment for the Lambda function.


To use
            the Python runtime v3.6, set the value to "python3.6". To use the
            Python runtime v2.7, set the value to "python2.7". To use the
            Node.js runtime v6.10, set the value to "nodejs6.10". To use the
            Node.js runtime v4.3, set the value to "nodejs4.3". To use the .NET
            Core runtime v1.0, set the value to "dotnetcore1.0". To use the .NET
            Core runtime v2.0, set the value to "dotnetcore2.0".



Node v0.10.42 is currently marked as deprecated. You must migrate
            existing functions to the newer Node.js runtime versions available
            on AWS Lambda (nodejs4.3 or nodejs6.10) as soon as possible. Failure
            to do so will result in an invalid parameter error being returned.
            Note that you will have to follow this procedure for each region
            that contains functions written in the Node v0.10.42 runtime.



        DeadLetterConfig:
          $ref: '#/components/schemas/DeadLetterConfig'
          description: >-
            The parent object that contains the target ARN (Amazon Resource
            Name) of an Amazon SQS queue or Amazon SNS topic. For more
            information, see dlq.
        KMSKeyArn:
          $ref: '#/components/schemas/KMSKeyArn'
          description: >-
            The Amazon Resource Name (ARN) of the KMS key used to encrypt your
            function's environment variables. If you elect to use the AWS Lambda
            default service key, pass in an empty string ("") for this
            parameter.
        TracingConfig:
          $ref: '#/components/schemas/TracingConfig'
          description: The parent object that contains your function's tracing settings.
        RevisionId:
          $ref: '#/components/schemas/String'
          description: >-
            An optional value you can use to ensure you are updating the latest
            update of the function version or alias. If the
            RevisionID you pass doesn't match the latest
            RevisionId of the function or alias, it will fail with
            an error message, advising you to retrieve the latest function
            version or alias RevisionID using either or .
      description:

    Version:
      type: string
      pattern: '(\$LATEST|[0-9]+)'
      minLength: 1
      maxLength: 1024
    VpcConfig:
      type: object
      properties:
        SubnetIds:
          $ref: '#/components/schemas/SubnetIds'
          description: A list of one or more subnet IDs in your VPC.
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIds'
          description: A list of one or more security groups IDs in your VPC.
      description: >-
        If your Lambda function accesses resources in a VPC, you provide this
        parameter identifying the list of security group IDs and subnet IDs.
        These must belong to the same VPC. You must provide at least one
        security group and one subnet ID.
    VpcConfigResponse:
      type: object
      properties:
        SubnetIds:
          $ref: '#/components/schemas/SubnetIds'
          description: A list of subnet IDs associated with the Lambda function.
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIds'
          description: A list of security group IDs associated with the Lambda function.
        VpcId:
          $ref: '#/components/schemas/VpcId'
          description: The VPC ID associated with you Lambda function.
      description: VPC configuration associated with your Lambda function.
    VpcId:
      type: string
    Weight:
      type: number
      format: double
      minimum: 0
      maximum: 1
